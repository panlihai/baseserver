#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var http = require('http');
var mysql = require('../service/mysql.js');
var cfg = require('../config.js');
var log = require('../service/log.js');
function startServer() {
    /**
     * Get port from environment and store in Express.
     */
    var port = normalizePort(process.env.PORT || cfg.port);
    app.set('port', port);
    /**
     * Create HTTP server.
     */
    var server = http.createServer(app);
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    //捕获域里的异常
    app.use(function (req, res, next) {
        var domain = require('domain').create();
        domain.on('error', function (err) {
            debug('DOMAIN ERROR CAUGHT\n', err.stack);
            try {
                setTimeout(function () {
                    log.log('Failsafe shutdown.');
                    process.exit(1);
                }, 5000);
                //从集群中断开
                var worker = require('cluster').worker;
                if (worker) {
                    worker.disconnect();
                }
            } catch (err) {
                console.error('Express error mechanism failed.\n', err.stack);
            }
            server.close();
            try {
                next(err);
            } catch (err) {
                console.error('Express error mechanism failed.\n', err.stack);
            }
        });
        //向域中添加请求和响应对象
        domain.add(req);
        domain.add(res);
        //执行该域中剩余的请求链
        domain.run(next);
    });
    /**
     * Normalize a port into a number, string, or false.
     */
    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }
        if (port >= 0) {
            // port number
            return port;
        }
        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */
    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }
        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;
        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */
    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        log.log('Listening on ' + bind);
        init();
    }

    /**
     * 初始化系统
     */
    function init() {
        //初始化连接池
        mysql.initPools(cfg.masterConfig);
    }
}
if (require.main == module) {
    //如果是应用程序直接运行，启动应用程序
    startServer();
} else {
    //如果是应用程序作为一个模块通过“require”引入：导入函数
    //创建服务器
    module.exports = startServer;
}